let string = 'Sample text for testing: abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789 _+-.,!@#$%^&*();\/|<>"\' 12345 -98.7 3.141 .6180 [dfasd] [d324fw] 9,000 +42 555.123.4567 {dsfasd234} +1-(800)-555-2468 foo@demo.net bar.ba@test.co.uk www.demo.com http://foo.co.uk/ http://regexr.com/foo.html?q=bar https://mediatemple.net';
let string2 = 'aaaaaaaaLDLKjdhflsBdbBDasd8we9028345034yi986U0ERueri09872';

// найдем первую попавшуюся букву "a"
// так как флаги не выставлены, найдется только первая буква
console.log(string.match(/a/)); // ['a']

// теперь выставим флаг -g и найдем все буквы "a"
console.log("\n", string.match(/a/g)); // ['a', 'a', 'a', 'a']

// теперь выставим флаг -i и найдем все буквы "a" учитывая и верхний регистр
console.log("\n", string.match(/a/gi)); // ['a', 'A', 'a', 'A']

// найдем все "com"
console.log("\n", string.match(/com/gi)); // ['com', 'com']

// регуляные выражения могут искать группы символов, они называюстя классы
// например, найдем все буквы в нижнем регистре
console.log("\n", string.match(/[a-z]/gi)); // ['a', 'b', 'c' ...]

// например, найдем все буквы и в нижнем и в верхнем регистре
console.log("\n", string.match(/[a-zA-Z]/gi)); // ['a', 'B', 'c' ...]

// так же, нам никто не мешает искать только часть алфавита
console.log("\n", string.match(/[a-dA-D]/gi)); // ['a', 'B', 'c' 'd']

// мы можем найти в буквы, которые повторяются указанное количество раз
console.log("\n", string2.match(/a{2}/gi)); // ['aa', 'aa', 'aa', 'aa']

// или которые повторяются от и до указанноого количества раз
console.log("\n", string2.match(/a{1,3}/gi)); // ['aaa', 'aaa', 'aa', 'a']

// чтобы найти буквы, которые повторяются неограниченное количество раз
// используем конструкцию .*?
// здесь - точка не явяется точкой как частью строки, это важно
// точка в регулярных выражениях означает любой символ
console.log("\n", string2.match(/a.*?/gi)); // ['a', 'a', 'a', 'a']

// в регулярных выражениях есть группы, они могут запоминаться при поиске
// и мы можем поймать их при помощи знака доллара
// если группа одна, то будет только $1, если их много - то $1, $2, $...n
console.log("\n", string2.replace(/([a-zA-Z].*?(?=[0-9]))/gi, "[$1]"));

// в данном случае в группе записаны варианты "ИЛИ"
// то есть будет искаться либо "a" либо "b"
// "ИЛИ" записывается через слеш, и не обязательно может быть только в группе
console.log("\n", string2.replace(/(a|b)/gi, "[$1]"));

// "ИЛИ" вне группы
// найдутся буквы или "a" или "b" и на их место вставим (a|b)
console.log("\n", string2.replace(/a|b/gi, "(a|b)"));

// в регулярных выражениях существует мезанизм, который
// может "смотреть" вперед или назад и учитывать результаты увиденного при поиске
// в Javascript реализован только просмотр вперед, к сожадению
// это помогает нам найти буквы, за которыми стоят цифры
console.log("\n", string2.replace(/([a-zA-Z].*?(?=[0-9]))/gi, '[$1]'));

// важно помнить, что в регулярных выражениях можно свободно пользоваться только
// некоторыми спецсимволами, потому что они могут иметь свое значение (например точка)
// поэтому их нужно экранировать
// напрмиер, если мы хотим найти контент в квадратных скобках
// /[.*?]/ нам не подойдет, потому что в выражении - это класс, или диапазон символов
// поэтому ищем их экранируя
console.log("\n", string.match(/\[.*?\]/gi));

// та же самая ситуация с обычными круглыми скобками или фигурными скобками
// круглые - обозначают группу
// фигурные - повторение n-ное количество раз
console.log("\n", string.match(/(\(.*?\)|\{.*?\})/gi));

// в регулярных выражениях есть большое количество сокращенных конструкций
// например, мы можем выбрать все цифры при помощи класса
console.log("\n", string.match(/[0-9]/gi));

// но можем сделать это гораздо проще используя сокращенную конструкцию "\d"
console.log("\n", string.match(/\d/gi));

// если мы хотим выбреть все символы, что не являются цифрами, то можем сделать так
console.log("\n", string.match(/\D/gi));

// чтобы найти все слова, можем найти их так
console.log("\n", string.match(/\w+/gi));

// пример из жизни
// допустим, у нас есть строка с текстом сообщения
var message = "   		 	 Hello, I'm magick :)\nI'm doing my homeworks and i am very happy!!!!!!!!!!";
// и нам нужно вывести ее в HTML разметке приведя в нормальный вид
console.log("\n",
	// первое - вырежим табы и пробелы с самого начала строки
	// ^ - означает начало строки в данном случае
	// (\n|\s|\t) - группа, будем искать любые символы из указанных
	// +? - они могут повторяться 0 или больше раз, это то же самое что {0,}
	message.replace(/(^(\s|\t)+?)(?=[a-zA-Z])/gim, '')
		// заменим перенос строки на тег <br>
		.replace(/\n/gim, '<br>\n')
		// теперь заменим смайлики на картинки смайликов
		.replace(/\:\)/gim, '<img src="smiles/smile.png" />')
		// теперь удалим спецсимволы, которые повторяются слишком много раз
		// мы же не ТП-шечки и не Владимир, чтобы так писать сообщения
		// (\!+?) мы берем все знаки восклицания которые повторяются неограниченное кол-во раз
		// (?=\!) за которым стоит такой же знак
		// это нужно для того, чтобы когда поиск дойдет до последнего знака
		// за ним такой же знак стоять уже не будет и поиск не сработает
		// таким образом мы оставим только последний
		.replace(/(\!+?)(?=\!)/gim, '')
);